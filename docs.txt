
https://pythonru.com/biblioteki/znakomstvo-s-fastapi
--base of FastApi (--uvicorn)

HHAHAHAHA
to correct use fast api u need to press ctrl+s every time))
I know,that is very stupid
LOL


            """from fastapi import FastAPI

            app = FastAPI()

            @app.get("/")
            def read_root():
                return {"message": "Welcome to this fantastic app!"}

            @app.get("/items/{item_id}")
            def read_item(item_id: int):
                return {"item_name": "Item " + str(item_id)}"""


In this example, we define a FastAPI app with two routes: one for the root URL ("/") and one for a dynamic URL ("/items/{item_id}"). The read_root function returns a JSON response with a message, and the read_item function returns a JSON response with an item name based on the item_id parameter.

Overall, FastAPI is a great choice for building APIs with Python because of its speed, ease of use, and robust feature set.


write me exaple of pro-using this framework


Here's an example of a RESTful API using FastAPI that demonstrates some of its features:

Example: User Management API

Let's create a simple User Management API that allows you to create, read, update, and delete users.

main.py



from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()

class User(BaseModel):
    id: int
    name: str
    email: str

users = [
    User(id=1, name="John Doe", email="johndoe@example.com"),
    User(id=2, name="Jane Doe", email="janedoe@example.com"),
]

@app.get("/users/", response_model=List[User])
async def read_users():
    return users

@app.get("/users/{user_id}", response_model=User)
async def read_user(user_id: int):
    for user in users:
        if user.id == user_id:
            return user
    raise HTTPException(status_code=404, detail="User not found")

@app.post("/users/", response_model=User)
async def create_user(user: User):
    user.id = len(users) + 1
    users.append(user)
    return user

@app.put("/users/{user_id}", response_model=User)
async def update_user(user_id: int, user: User):
    for i, existing_user in enumerate(users):
        if existing_user.id == user_id:
            users[i] = user
            return user
    raise HTTPException(status_code=404, detail="User not found")

@app.delete("/users/{user_id}")
async def delete_user(user_id: int):
    for i, user in enumerate(users):
        if user.id == user_id:
            del users[i]
            return {"message": "User deleted"}
    raise HTTPException(status_code=404, detail="User not found")
Explanation:

We define a User model using Pydantic's BaseModel, which allows us to define the structure of our data.
We create a list of User objects, which will serve as our in-memory database.
We define five routes:
GET /users/: Returns a list of all users.
GET /users/{user_id}: Returns a single user by ID.
POST /users/: Creates a new user.
PUT /users/{user_id}: Updates an existing user.
DELETE /users/{user_id}: Deletes a user.
We use FastAPI's built-in support for asynchronous programming to define our routes as async functions.
We use Pydantic's response_model parameter to specify the response model for each route.
We use FastAPI's HTTPException to raise errors with a specific status code and detail message.
Running the API:

To run the API, save the code to a file named main.py and run it using uvicorn:


Verify

Open In Editor
Edit
Copy code
$ uvicorn main:app --reload
This will start the API on http://localhost:8000. You can use a tool like curl or a REST client like Postman to test the API.

Example Requests:

GET /users/: Returns a list of all users.

Verify

Open In Editor
Edit
Copy code
$ curl http://localhost:8000/users/
[
  {"id": 1, "name": "John Doe", "email": "johndoe@example.com"},
  {"id": 2, "name": "Jane Doe", "email": "janedoe@example.com"}
]
GET /users/1: Returns a single user by ID.

Verify

Open In Editor
Edit
Copy code
$ curl http://localhost:8000/users/1
{"id": 1, "name": "John Doe", "email": "johndoe@example.com"}
POST /users/: Creates a new user.

Verify

Open In Editor
Edit
Copy code
$ curl -X POST -H "Content-Type: application/json" -d '{"name": "New User", "email": "newuser@example.com"}' http://localhost:8000/users/
{"id": 3, "name": "New User", "email": "newuser@example.com"}
PUT /users/1: Updates an existing user.

Verify

Open In Editor
Edit
Copy code
$ curl -X PUT -H "Content-Type: application/json" -d '{"name": "Updated User", "email": "updateduser@example.com"}' http://localhost:8000/users/1
{"id": 1, "name": "Updated User", "email": "updateduser@example.com"}
DELETE /users/1: Deletes a user.

Verify

Open In Editor
Edit
Copy code
$ curl -X DELETE http://localhost:8000/users/1
{"message": "User deleted"}
This example demonstrates some of the key features of FastAPI, including:

Automatic